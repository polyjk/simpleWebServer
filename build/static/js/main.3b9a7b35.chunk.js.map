{"version":3,"sources":["Note.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["Note","props","note","toggleImportanceOf","label","important","onClick","content","baseUrl","axios","get","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","console","log","noteService","then","response","data","length","notesToShow","filter","className","map","find","i","changedNote","catch","error","alert","n","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAgBeA,EAdF,SAACC,GACZ,IAAQC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,mBACRC,EAAQF,EAAKG,UAAY,iBAAmB,eAElD,OACE,8BACE,+BACE,wBAAQC,QAASH,EAAjB,SAAsCC,IACrCF,EAAKK,c,gBCRRC,EAAU,iDAcD,EAZA,WACb,OAAOC,IAAMC,IAAIF,IAWJ,EARA,SAACG,GACd,OAAOF,IAAMG,KAAKJ,EAASG,IAOd,EAJA,SAACE,EAAIF,GAClB,OAAOF,IAAMK,IAAN,UAAaN,EAAb,YAAwBK,GAAMF,ICoFxBI,EA3FH,SAACd,GAGX,MAA0Be,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,QAAQC,IAAI,UAEZC,IAAqBC,MAAK,SAACC,GACzBJ,QAAQC,IAAI,oBACZD,QAAQC,IAAIG,GACZV,EAASU,EAASC,WAEnB,IACHL,QAAQC,IAAI,SAAUR,EAAMa,OAAQ,SAEpC,IAwBMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAC9B,GAAD,OAA6B,IAAnBA,EAAKG,aAqBhC,OACE,sBAAK4B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,0BAEA,wBAAQ3B,QAAS,kBAAMgB,GAAYD,IAAnC,SACGA,EAAU,YAAc,QAG3B,6BACGU,EAAYG,KAAI,SAAChC,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,mBAAoB,kBAhCH,SAACU,GAC1BW,QAAQC,IAAI,OAAQZ,EAAI,wBAExB,IAAMX,EAAOe,EAAMkB,MAAK,SAACC,GAAD,OAAOA,EAAEvB,KAAOA,KAClCwB,EAAW,2BAAQnC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDqB,EACUb,EAAIwB,GACXV,MAAK,SAACC,GACLJ,QAAQC,IAAI,qBACZD,QAAQC,IAAIG,GACZV,EAASD,EAAMiB,KAAI,SAAChC,GAAD,OAAWA,EAAKW,KAAOA,EAAKX,EAAO0B,EAASC,YAEhES,OAAM,SAACC,GACNC,MAAM,aAAD,OAActC,EAAKK,QAAnB,sCACLW,EAASD,EAAMe,QAAO,SAACS,GAAD,OAAOA,EAAE5B,KAAOA,SAiBRV,CAAmBD,EAAKW,MAF7CX,EAAKW,SAOhB,uBAAM6B,SAjEM,SAACC,GACfA,EAAMC,iBAEN,IAAMC,EAAa,CACjBtC,QAASY,EACT2B,MAAM,IAAIC,MAAOC,cACjB3C,UAAW4C,KAAKC,SAAW,IAK7BxB,EAAmBmB,GAAYlB,MAAK,SAACC,GACnCJ,QAAQC,IAAI,qBACZD,QAAQC,IAAIG,GACZV,EAASD,EAAMkC,OAAOvB,EAASC,OAC/BT,EAAW,QAkDX,UACE,uBAAOgC,MAAOjC,EAASkC,SA/CJ,SAACV,GACxBnB,QAAQC,IAAIkB,EAAMW,OAAOF,OACzBhC,EAAWuB,EAAMW,OAAOF,UA8CpB,wBAAQG,KAAK,SAAb,yBC/EOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3b9a7b35.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = (props) => {\r\n  const { note, toggleImportanceOf } = props;\r\n  const label = note.important ? \"setUnimportant\" : \"setImportant\";\r\n\r\n  return (\r\n    <div>\r\n      <li>\r\n        <button onClick={toggleImportanceOf}>{label}</button>\r\n        {note.content}\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\n// const baseUrl = \"http://localhost:3001/api/notes\";\r\nconst baseUrl = \"https://john-notes-app.herokuapp.com/api/notes\";\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  return axios.post(baseUrl, newObject);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject);\r\n};\r\n\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  update: update,\r\n};\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Note from \"./Note\";\nimport axios from \"axios\";\nimport noteService from \"./services/notes\";\n\nconst App = (props) => {\n  //console.log(props);\n  // const { notes } = props;\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n\n  useEffect(() => {\n    console.log(\"effect\");\n    // axios.get(\"http://localhost:3001/notes\").then((response) => {\n    noteService.getAll().then((response) => {\n      console.log(\"promise fufilled\");\n      console.log(response);\n      setNotes(response.data);\n    });\n  }, []);\n  console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    //console.log(\"ButtonClicked\", event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      //id: notes.length + 1,\n    };\n\n    // axios.post(\"http://localhost:3001/api/notes\", noteObject)\n    noteService.create(noteObject).then((response) => {\n      console.log(\"promise fulfilled\");\n      console.log(response);\n      setNotes(notes.concat(response.data));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  const toggleImportanceOf = (id) => {\n    console.log(\"Note\", id, \"needs to be toggled.\");\n    //const url = `http://localhost:3001/api/notes/${id}`;\n    const note = notes.find((i) => i.id === id);\n    const changedNote = { ...note, important: !note.important };\n    // axios.put(url, changedNote)\n    noteService\n      .update(id, changedNote)\n      .then((response) => {\n        console.log(\"promise fulfilled\");\n        console.log(response);\n        setNotes(notes.map((note) => (note.id !== id ? note : response.data)));\n      })\n      .catch((error) => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Notes Header</header>\n\n      <button onClick={() => setShowAll(!showAll)}>\n        {showAll ? \"Important\" : \"All\"}\n      </button>\n\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportanceOf={() => toggleImportanceOf(note.id)}\n          ></Note>\n        ))}\n      </ul>\n\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}